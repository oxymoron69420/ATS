i need you to build me a Login module for an applicant tracking system with Next Js and PostgreSQL with Fast API... i need it to have a profile system(HR, Admin and User) Give me step by step instructions and also give me a file map to navigate through the filesi dont have docker and i dont know anything about these technologies so plz help me out with these by providing step by step instructions.... im on windows btw so plz tell me what im supposed to do in a detailed manner and also SUDO isnt activatedEditI'll help you build a complete Login module for an applicant tracking system with Next.js frontend, FastAPI backend, and PostgreSQL database. Since you're on Windows without Docker, I'll provide detailed step-by-step instructions.
File Structure Overview
applicant-tracking-system/
├── frontend/                 # Next.js application
│   ├── components/
│   │   ├── Auth/
│   │   │   ├── LoginForm.js
│   │   │   └── ProtectedRoute.js
│   │   └── Layout/
│   │       └── Navbar.js
│   ├── pages/
│   │   ├── api/
│   │   ├── auth/
│   │   │   └── login.js
│   │   ├── dashboard/
│   │   │   ├── admin.js
│   │   │   ├── hr.js
│   │   │   └── user.js
│   │   ├── _app.js
│   │   └── index.js
│   ├── lib/
│   │   └── auth.js
│   ├── package.json
│   └── next.config.js
├── backend/                  # FastAPI application
│   ├── app/
│   │   ├── auth/
│   │   │   ├── __init__.py
│   │   │   ├── models.py
│   │   │   ├── routes.py
│   │   │   └── utils.py
│   │   ├── database/
│   │   │   ├── __init__.py
│   │   │   └── connection.py
│   │   ├── __init__.py
│   │   └── main.py
│   ├── requirements.txt
│   └── .env
└── README.md
Step 1: Install Prerequisites
1.1 Install Node.js

Go to nodejs.org
Download the LTS version for Windows
Run the installer and follow the setup wizard
Open Command Prompt (cmd) and verify installation:
bashnode --version
npm --version


1.2 Install Python

Go to python.org
Download Python 3.9+ for Windows
During installation, check "Add Python to PATH"
Open Command Prompt and verify:
bashpython --version
pip --version


1.3 Install PostgreSQL

Go to postgresql.org/download/windows/
Download the installer
Run installer with these settings:

Port: 5432
Remember your password (you'll need it later)
Install pgAdmin 4 (database management tool)


After installation, open pgAdmin 4 and create a new database called ats_db

Step 2: Set Up the Backend (FastAPI)
2.1 Create Project Structure
bashmkdir applicant-tracking-system
cd applicant-tracking-system
mkdir backend
cd backend
2.2 Create Virtual Environment
bashpython -m venv venv
venv\Scripts\activate
2.3 Install Python Dependencies
Create requirements.txt:requirements.txtCode fastapi==0.104.1
uvicorn==0.24.0
psycopg2-binary==2.9.9
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
sqlalchemy==2.0.23
alembic==1.12.1
python-dotenv==1.0.0
pydantic==2.5.0
pydantic-settings==2.1.0Install dependencies:
bashpip install -r requirements.txt
2.4 Create Environment File
Create .env file in backend folder:.envCode DATABASE_URL=postgresql://postgres:your_password@localhost:5432/ats_db
SECRET_KEY=your-secret-key-here-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30Replace your_password with your PostgreSQL password
2.5 Create Backend Files
Create the directory structure:
bashmkdir app
mkdir app\auth
mkdir app\database
Create app/__init__.py:
bashtype nul > app\__init__.py
Create app/database/__init__.py:
bashtype nul > app\database\__init__.py
Create app/auth/__init__.py:
bashtype nul > app\auth\__init__.py
Create app/database/connection.py:app/database/connection.pyCode from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")

engine = create_enCreate app/auth/models.py:app/auth/models.pyCode from sqlalchemy import Column, Integer, String, DateTime, Enum
from sqlalchemy.sql import func
from app.database.connection import Base
import enum

class UserRole(enum.Enum):
    ADMIN = "admin"
    HR = "hr"
    USER = "user"

class User(Base):
   Create app/auth/utils.py:app/auth/utils.pyCode from datetime import datetime, timedelta
from typing import Optional
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import HTTPException, status
import os
from dotenv import load_dotenv

load_dotenv()

SECRET_KEYCreate app/auth/routes.py:app/auth/routes.pyCode from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from pydantic import BaseModel
from app.database.connection import get_db
from app.Create app/main.py:app/main.pyCode from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.auth.routes import router as auth_router
from app.database.connection import engine
from app.auth.models import Base

# Create tables
Base.metadata.create_all(bin2.6 Test the Backend
Run the backend:
bashpython -m uvicorn app.main:app --reload
Open your browser and go to http://localhost:8000/docs to see the API documentation.
Step 3: Set Up the Frontend (Next.js)
3.1 Create Next.js App
Open a new Command Prompt window and navigate to your project root:
bashcd applicant-tracking-system
npx create-next-app@latest frontend --typescript --tailwind --eslint --app --src-dir --import-alias "@/*"
cd frontend
3.2 Install Additional Dependencies
bashnpm install axios js-cookie @types/js-cookie
3.3 Create Frontend Files
Create lib/auth.js:lib/auth.jsCode import axios from 'axios';
import Cookies from 'js-cookie';

const API_URL = 'http://localhost:8000/api';

// Create axios instance with default config
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'Create components/Auth/LoginForm.js:components/Auth/LoginForm.jsCode import { useState } from 'react';
import { useRouter } from 'next/router';
import { login } from '../../lib/auth';

export default function LoginForm() {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });
  const [loaCreate components/Auth/ProtectedRoute.js:components/Auth/ProtectedRoute.jsCode import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { isAuthenticated, hasRole } from '../../lib/auth';

export default function ProtectedRoute({ children, requiredRole = null }) {
  const [loading, setLoadingCreate components/Layout/Navbar.js:components/Layout/Navbar.jsCode import Link from 'next/link';
import { useRouter } from 'next/router';
import { getCurrentUser, logout, hasRole } from '../../lib/auth';

export default function Navbar() {
  const router = useRouter();
  const user = getCurrentUser();

  const handlCreate pages/auth/login.js:pages/auth/login.jsCode import { useEffect } from 'react';
import { useRouter } from 'next/router';RetryClaude does not have the ability to run the code it generates yet.DContinueEditpages/auth/login.jsCode ∙ Version 2 import { useEffect } from 'react';
import { useRouter } from 'next/router';
import LoginForm from '../../components/Auth/LoginForm';
import { isAuthenticated } from '../../lib/auth';

export default function LoginPage() {
  const router = useRouter()Create pages/dashboard/admin.js:pages/dashboard/admin.jsCode import ProtectedRoute from '../../components/Auth/ProtectedRoute';
import Navbar from '../../components/Layout/Navbar';
import { getCurrentUser } from '../../lib/auth';

export default function AdminDashboard() {
  const user = getCurrentUser();

  rCreate pages/dashboard/hr.js:pages/dashboard/hr.jsCode import ProtectedRoute from '../../components/Auth/ProtectedRoute';
import Navbar from '../../components/Layout/Navbar';
import { getCurrentUser } from '../../lib/auth';

export default function HRDashboard() {
  const user = getCurrentUser();

  retuCreate pages/dashboard/user.js:pages/dashboard/user.jsCode import ProtectedRoute from '../../components/Auth/ProtectedRoute';
import Navbar from '../../components/Layout/Navbar';
import { getCurrentUser } from '../../lib/auth';

export default function UserDashboard() {
  const user = getCurrentUser();

  reCreate pages/index.js:pages/index.jsCode import { useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { isAuthenticated, getCurrentUser } from '../lib/auth';

export default function Home() {
  const router = useRouter();
  const user = geCreate pages/unauthorized.js:pages/unauthorized.jsCode import Link from 'next/link';

export default function Unauthorized() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <diStep 4: Create Database Tables and Initial Data
4.1 Create Initial Admin User
Create a script to add an initial admin user. Create backend/create_admin.py:backend/create_admin.pyCode from sqlalchemy.orm import Session
from app.database.connection import SessionLocal, engine
from app.auth.models import Base, User, UserRole
from app.auth.utils import get_password_hash

# Create tables
Base.metadata.create_all(bind=engine)

def creaStep 5: Running the Application
5.1 Start the Backend
In your backend directory:
bashcd backend
venv\Scripts\activate
python create_admin.py
python -m uvicorn app.main:app --reload
5.2 Start the Frontend
Open a new Command Prompt, navigate to frontend directory:
bashcd frontend
npm run dev
Step 6: Testing the Application
6.1 Test Login

Go to http://localhost:3000
Click "Get Started" to go to login page
Use these test credentials:

Email: admin@example.com
Password: admin123



6.2 Create Additional Users
You can create additional users by registering via the API at http://localhost:8000/docs
Step 7: Next.js Configuration
Create next.config.js in the frontend directory:next.config.jsCode /** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  async redirects() {
    return [
      {
        source: '/dashboard',
        destination: '/dashboard/user',
        permanent: true,
      Complete Setup Instructions Summary
Windows Commands Summary:
bash# 1. Create project structure
mkdir applicant-tracking-system
cd applicant-tracking-system

# 2. Backend setup
mkdir backend
cd backend
python -m venv venv
venv\Scripts\activate
pip install -r requirements.txt
python create_admin.py
python -m uvicorn app.main:app --reload

# 3. Frontend setup (in new terminal)
cd applicant-tracking-system
npx create-next-app@latest frontend --typescript --tailwind --eslint --app --src-dir --import-alias "@/*"
cd frontend
npm install axios js-cookie @types/js-cookie
npm run dev
Features Implemented:

Authentication System:

JWT-based authentication
Role-based access control (Admin, HR, User)
Protected routes
Secure password hashing


Database Integration:

PostgreSQL with SQLAlchemy
User management
Role-based permissions


Frontend Components:

Login form with validation
Role-based dashboards
Navigation with user context
Protected route wrapper


API Endpoints:

/api/auth/login - User login
/api/auth/register - User registration
/api/auth/me - Get current user info



Access URLs:

Frontend: http://localhost:3000
Backend API: http://localhost:8000
API Documentation: http://localhost:8000/docs

Default Login:

Email: admin@example.com
Password: admin123

The system is now ready for use! Each role (Admin, HR, User) has access to different dashboards with appropriate permissions. You can extend this foundation by adding more features like job posting, application management, and more sophisticated user management.RetryClaude does not have the ability to run the code it generates yet.Dhow did you set up the backendEditLet me break down exactly how I set up the backend step by step:
Backend Setup Detailed Breakdown
1. Project Structure Creation
bashmkdir applicant-tracking-system
cd applicant-tracking-system
mkdir backend
cd backend
2. Python Virtual Environment Setup
bash# Create virtual environment
python -m venv venv

# Activate virtual environment (Windows)
venv\Scripts\activate

# Your prompt should now show (venv) indicating the virtual environment is active
3. Dependencies Installation
I created a requirements.txt file with all necessary Python packages:
textfastapi==0.104.1          # Main web framework
uvicorn==0.24.0           # ASGI server to run FastAPI
psycopg2-binary==2.9.9    # PostgreSQL adapter for Python
python-jose[cryptography]==3.3.0  # JWT token handling
passlib[bcrypt]==1.7.4    # Password hashing
python-multipart==0.0.6   # Form data handling
sqlalchemy==2.0.23        # Database ORM
alembic==1.12.1          # Database migrations
python-dotenv==1.0.0     # Environment variables
pydantic==2.5.0          # Data validation
pydantic-settings==2.1.0 # Settings management
Then installed them:
bashpip install -r requirements.txt
4. Directory Structure Setup
bashmkdir app
mkdir app\auth
mkdir app\database

# Create __init__.py files to make directories Python packages
type nul > app\__init__.py
type nul > app\auth\__init__.py
type nul > app\database\__init__.py
5. Environment Configuration
Created .env file for sensitive configuration:
bashDATABASE_URL=postgresql://postgres:your_password@localhost:5432/ats_db
SECRET_KEY=your-secret-key-here-change-this-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
6. Database Setup
File: app/database/connection.py

Set up SQLAlchemy database connection
Created database engine and session factory
Defined base model class for all database models

7. Authentication Models
File: app/auth/models.py

Created User model with SQLAlchemy
Defined user roles (Admin, HR, User) using Python enum
Set up database table structure for users

8. Authentication Utilities
File: app/auth/utils.py

Password hashing functions using bcrypt
JWT token creation and verification
Security utilities for authentication

9. API Routes
File: app/auth/routes.py

Created FastAPI router for authentication endpoints
Implemented login, register, and user info endpoints
Added middleware for token validation
Created Pydantic models for request/response validation

10. Main Application
File: app/main.py

Created FastAPI application instance
Set up CORS middleware for frontend communication
Included authentication routes
Configured automatic database table creation

11. Database Initialization
File: create_admin.py

Script to create initial admin user
Handles database table creation
Populates database with default admin credentials

How the Backend Architecture Works:
1. Request Flow:
Client Request → FastAPI → Router → Database → Response
2. Authentication Flow:
Login Request → Validate Credentials → Generate JWT → Return Token
Protected Route → Verify JWT → Get User Info → Allow/Deny Access
3. Database Layer:

SQLAlchemy ORM: Handles database operations
PostgreSQL: Stores user data and authentication info
Connection Pooling: Manages database connections efficiently

4. Security Features:

Password Hashing: Uses bcrypt for secure password storage
JWT Tokens: Stateless authentication
CORS Protection: Configured for frontend communication
Environment Variables: Sensitive data stored securely

5. API Structure:
/api/auth/login    - POST - User login
/api/auth/register - POST - User registration  
/api/auth/me       - GET  - Get current user info
Running the Backend:
1. Start Database:

PostgreSQL must be running on port 5432
Database ats_db must exist

2. Initialize Database:
bashpython create_admin.py
3. Start Server:
bashpython -m uvicorn app.main:app --reload
4. Access Points:

API: http://localhost:8000
Documentation: http://localhost:8000/docs
OpenAPI Schema: http://localhost:8000/openapi.json

Key Backend Technologies Used:

FastAPI: Modern, fast web framework for building APIs
SQLAlchemy: SQL toolkit and Object-Relational Mapping
PostgreSQL: Robust relational database
JWT: JSON Web Tokens for authentication
Pydantic: Data validation using Python type annotations
Uvicorn: Lightning-fast ASGI server

This setup provides a solid foundation for a scalable, secure applicant tracking system with proper authentication and role-based access control.


(venv) PS D:\test\applicant-tracking-system\frontend> cd backend
cd : Cannot find path 'D:\test\applicant-tracking-system\frontend\backend' because it does not exist.
At line:1 char:1
+ cd backend
+ ~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (D:\test\applica...rontend\backend:String) [Set-Location], ItemNotFoun  
   dException
    + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.SetLocationCommand

(venv) PS D:\test\applicant-tracking-system\frontend> cd ..
(venv) PS D:\test\applicant-tracking-system> cd backend
(venv) PS D:\test\applicant-tracking-system\backend> python -m uvicorn app.main:app --reload
INFO:     Will watch for changes in these directories: ['D:\\test\\applicant-tracking-system\\backend']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [2472] using StatReload
Process SpawnProcess-1:
Traceback (most recent call last):
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 145, in __init__
    self._dbapi_connection = engine.raw_connection()
                             ~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 3297, in raw_connection
    return self.pool.connect()
           ~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 449, in connect
    return _ConnectionFairy._checkout(self)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 1264, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 713, in checkout
    rec = pool._do_get()
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\impl.py", line 179, in _do_get
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\impl.py", line 177, in _do_get
    return self._create_connection()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 390, in _create_connection
    return _ConnectionRecord(self)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 675, in __init__
    self.__connect()
    ~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 901, in __connect
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 897, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
                                         ~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\create.py", line 646, in connect
    return dialect.connect(*cargs, **cparams)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 625, in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\psycopg2\__init__.py", line 135, in connect  
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: FATAL:  password authentication failed for user "postgres"


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Python313\Lib\multiprocessing\process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "C:\Python313\Lib\multiprocessing\process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\uvicorn\_subprocess.py", line 80, in subprocess_started
    target(sockets=sockets)
    ~~~~~~^^^^^^^^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\uvicorn\server.py", line 67, in run
    return asyncio.run(self.serve(sockets=sockets))
           ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python313\Lib\asyncio\runners.py", line 195, in run
    return runner.run(main)
           ~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\asyncio\runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "C:\Python313\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\uvicorn\server.py", line 71, in serve        
    await self._serve(sockets)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\uvicorn\server.py", line 78, in _serve       
    config.load()
    ~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\uvicorn\config.py", line 436, in load        
    self.loaded_app = import_from_string(self.app)
                      ~~~~~~~~~~~~~~~~~~^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\uvicorn\importer.py", line 19, in import_from_string
    module = importlib.import_module(module_str)
  File "C:\Python313\Lib\importlib\__init__.py", line 88, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1387, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1360, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1331, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 935, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 1026, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "D:\test\applicant-tracking-system\backend\app\main.py", line 8, in <module>
    Base.metadata.create_all(bind=engine)
    ~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\sql\schema.py", line 5924, in create_all
    bind._run_ddl_visitor(
    ~~~~~~~~~~~~~~~~~~~~~^
        ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 3247, in _run_ddl_visitor
    with self.begin() as conn:
         ~~~~~~~~~~^^
  File "C:\Python313\Lib\contextlib.py", line 141, in __enter__
    return next(self.gen)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 3237, in begin
    with self.connect() as conn:
         ~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 3273, in connect
    return self._connection_cls(self)
           ~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 147, in __init__
    Connection._handle_dbapi_exception_noconnection(
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        err, dialect, engine
        ^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2436, in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 145, in __init__
    self._dbapi_connection = engine.raw_connection()
                             ~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\base.py", line 3297, in raw_connection
    return self.pool.connect()
           ~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 449, in connect
    return _ConnectionFairy._checkout(self)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 1264, in _checkout
    fairy = _ConnectionRecord.checkout(pool)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 713, in checkout
    rec = pool._do_get()
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\impl.py", line 179, in _do_get
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\impl.py", line 177, in _do_get
    return self._create_connection()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 390, in _create_connection
    return _ConnectionRecord(self)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 675, in __init__
    self.__connect()
    ~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 901, in __connect
    with util.safe_reraise():
         ~~~~~~~~~~~~~~~~~^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 224, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\pool\base.py", line 897, in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
                                         ~~~~~~~~~~~~~~~~~~~~^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\create.py", line 646, in connect
    return dialect.connect(*cargs, **cparams)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\sqlalchemy\engine\default.py", line 625, in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)  # type: ignore[no-any-return]  # NOQA: E501
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "D:\test\applicant-tracking-system\backend\venv\Lib\site-packages\psycopg2\__init__.py", line 135, in connect  
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: FATAL:  password authentication failed for user "postgres"

(Background on this error at: https://sqlalche.me/e/20/e3q8)
